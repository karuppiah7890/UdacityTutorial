What happens when you initialize a repository? Why do you need to do it?
A .git folder is created. This is the folder which will hold the meta data about the commits and the changes in files. We need it because Git has to store the meta data in this folder and that's how Git manages the commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?
Working directory is the directory containing project files. Repository is the one which contains meta data about commits made in the project. Staging area is the area where particular files can be added from the working directory, and then this collection of files in the staging area can be commited to the repository. So, this is the thing that a staging area offers. Committing particular files from the working directory to the repository.

How can you use the staging area to make sure you have one commit per logical change?
Each time, we can add the files realted to only one logical change to the staging area, then commit this the files in the staging area to the repository.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches can be used to name notable versions/sub-versions of the project and keep the history organized. Branches would be helpful when we have some experimental feature or some different version of the project. 

How do the diagrams help you visualize the branch structure?
They help me tell what branches are there for the project. And if there are any unreachable branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
All the commits of the two branches are merged and we represent it like that to show that it's a mix of the other commits.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
